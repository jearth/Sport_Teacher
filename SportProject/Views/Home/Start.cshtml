@{
    ViewBag.title = "운동부 지도자";
    Layout = "../Shared/_Layout.cshtml";
    string registerPageUrl = Url.Content("../Register.cshtml");
    var li = ViewBag.LeaderinfoList;
}

<link href="~/css/Start.css" rel="stylesheet" type="text/css" />

<h4>지도자 관리</h4>
<div class="container" id="container1">
    <h7>검색 조회</h7>
    <div class="search-box">
        <div class="select">
            <div class="selected">
                <div class="selected-value">전체</div>
                <div class="arrow"></div>
            </div>
            <ul>
                <li class="option">전체</li>
                <li class="option">이름</li>
                <li class="option">종목</li>
            </ul>
        </div>
        <!-- select, option으로 구성하면 option을 디자인 할 수 없음. 때문에 ul과 li로 코드짜기 -->
        <div class="input-box">
            <input type="text" placeholder="이름을 입력해주세요." id="searchInput">
        </div>
        <div class="button-box">
            <div class="search-button">검색하기</div>
        </div>
    </div>
</div>

<div class="container" id="container2">
    <div class="row row-cols-1">
        <div class="content-header">
            <h5>
                전체 지도자 목록
                <p id="totalleader">총</p>
            </h5>
            <div class="button-box">
                <div class="button register" onclick="window.location.href='@Url.Action("Register")'">
                    지도자 등록하기
                </div>
                <div class="button delete">삭제하기</div>
                <div id="deletePopup" class="popup">
                    <h2>지도자 삭제</h2>
                    <span class="close" onclick="closePopup('deletePopup')">&times;</span>
                    <p>지도자를 삭제하시겠습니까? </br>삭제된 지도자는 복구되지 않습니다.</p>
                    <div class="popup-button-box">
                        <button class="confirm">확인</button>
                        <button class="register" onclick="close-popup">취소</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="leaderTable">
            <table>
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAll" />번호</th>
                        <th>식별코드</th>
                        <th>이름</th>
                        <th>종목</th>
                        <th>소속학교</th>
                        <th>이력 정보 상세</th>
                    </tr>
                </thead>
                <tbody class="leaderTable_body"></tbody>
            </table>
        </div>
        <div class="col">
            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Previous" id="PreviousPageLink">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    <div id="page">
                    </div>
                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Next" id="NextPageLink">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // HTML에서 클래스가 "select"인 모든 요소를 선택하여 document.querySelectorAll에 저장
        const selectBoxElements = document.querySelectorAll(".select");

        // 선택 상자 함수
        function toggleSelectBox(selectBox) {
            selectBox.classList.toggle("active");
        }

        // 옵션 선택 함수
        function selectOption(optionElement) {
            // 선택한 옵션이 속한... 선택 상자를 찾고
            const selectBox = optionElement.closest(".select");

            // 그리고 선택 상자 내부에서 현재 선택된 항목을 나타내는 요소 찾고
            const selectedElement = selectBox.querySelector(".selected-value");

            // 선택한 옵션의 텍스트 내용을 현재 선택된 항목에 표시하고
            selectedElement.textContent = optionElement.textContent;
        }

        // 클릭 이벤트 핸들러 함수
        function handleSelectBoxClick(e) {
            const targetElement = e.target;
            const isOptionElement = targetElement.classList.contains("option");

            // 클릭된 요소가 옵션인 경우 해당 옵션 선택 함수 호출, 그렇지 않으면 선택 상자 토글
            if (isOptionElement) {
                selectOption(targetElement);
            }

            toggleSelectBox(this);
        }

        // 각 선택 상자에 대한 이벤트 리스너
        selectBoxElements.forEach(selectBoxElement => {
            selectBoxElement.addEventListener("click", handleSelectBoxClick);
        });

        // 문서 어느 곳이든 클릭할 때 발생하는 이벤트 리스너
        function handleDocumentClick(e) {
            const targetElement = e.target;

            // 클릭된 요소가 선택 상자인지 또는 선택 상자의 하위 요소인지 확인
            const isSelect = targetElement.classList.contains("select") || targetElement.closest(".select");

            if (isSelect) {
                return;
            }

            // 클릭된 요소가 선택 상자 또는 선택 상자의 하위 요소가 아닌 경우 모든 선택 상자 비활성화
            const allSelectBoxElements = document.querySelectorAll(".select");

            allSelectBoxElements.forEach(boxElement => {
                boxElement.classList.remove("active");
            });
        }

        document.addEventListener("click", handleDocumentClick);


        // -------------------------------------------------------------------------------------------
        var pageSize = 10;
        var currentPage = 1;
        var totalPages;
        var tableData = [];
        var orgLeaderTableSource = JSON.parse('@li'.replace(/&quot;/g, '"'));
        

        function initialize() {
            registEvents();
            tableData = orgLeaderTableSource;
            updateTable(getCurrentPageData());
        }

        function registEvents() {
        
            // 검색 필터 적용 버튼 클릭 이벤트
            $('.search-button').click(function () {
                applySearchFilter();
            });

            // 검색어 입력 시 엔터 키 이벤트
            $('#searchInput').keypress(function (e) {
                if (e.which === 13) { // 엔터 키
                    applySearchFilter();
                }
            });

            // 삭제하기 버튼 클릭 시 팝업 창 표시
            $('.button.delete').click(function () {
                var checkedItems = $('.leaderTable_body input[type="checkbox"]:checked');
                if (checkedItems.length > 0) {
                    openDeletePopup(checkedItems);
                } else {
                    alert('선택된 항목이 없습니다.');
                }
            });

            // 팝업 창 확인 버튼 클릭 시 삭제 동작
            $('#deletePopup .confirm').one('click', function () {
                var checkedItems = $('.leaderTable_body input[type="checkbox"]:checked');

                handleDelete(checkedItems);

                // 팝업창 닫기
                $('#deletePopup').hide();
            });

            // 클릭 이벤트
            $('.leaderTable_body').on('click', '.detailsBtn', function () {

                // 현재 클릭한 행에 있는 식별코드 가져오기
                var leaderNo = $(this).closest('tr').find('td:eq(1)').text();

                // 식별코드를 지도자 등록하기 페이지로 전달하여 이동
                var detailUrl = '@Url.Action("Detail")';
                window.location.href = detailUrl + '?leaderNo=' + leaderNo;
            });
        }

        // 페이지를 로딩하고 초기 데이터를 표시하는 함수
        function pageButtonClicked(pageNumber) {
            goToPage(pageNumber);
        }

        // 페이지네이션 초기화 함수
        function pageInit(dataLength) {
            var pageButtons = $('.page-button');
            if (pageButtons.length > 0) {
                for (let i = 0; i < pageButtons.length; i++) {
                    pageButtons[i].remove();
                }
            }
            let pageLength = Math.ceil(dataLength / pageSize);
            for (let i = 1; i <= pageLength; i++) {
                let content = '<a class="page-link page-button" href="#" onclick="pageButtonClicked('+ i +')">' + i + '</a></li>';
                $('#page').before(content);
            }
        }

        // 페이지네이션 업데이트 함수
        function updatePagination() {
            totalPages = Math.ceil(tableData.length / pageSize);

            // 현재 페이지가 1이면 이전 버튼 비활성화
            $('#PreviousPageLink').prop('disabled', currentPage === 1);

            // 현재 페이지가 마지막 페이지면 다음 버튼 비활성화
            $('#NextPageLink').prop('disabled', currentPage === totalPages);

            // 동적으로 생성된 페이지 버튼에 대한 클릭 이벤트 핸들러
            $
            $('.pagination').off('click', '.page-item:not(#PreviousPageLink, #NextPageLink)'); // 이전에 등록된 클릭 핸들러 제거
            $('.pagination').on('click', '.page-item:not(#PreviousPageLink, #NextPageLink)', function () {
                var clickedPage = parseInt($(this).text());

                // 클릭된 페이지로 이동
                if (!isNaN(clickedPage)) {
                    goToPage(clickedPage);
                }
            });

            // "이전" 버튼 클릭 시 이전 페이지로 이동하는 이벤트
            $('#PreviousPageLink').click(handlePreviousButtonClick);

            // "다음" 버튼 클릭 시 다음 페이지로 이동하는 이벤트
            $('#NextPageLink').click(handleNextButtonClick);
        }

        // "이전" 버튼 클릭 시 이전 페이지로 이동하는 함수
        function handlePreviousButtonClick() {
            if (currentPage > 1) {
                goToPage(currentPage - 1);
            }
        }

        // "다음" 버튼 클릭 시 다음 페이지로 이동하는 함수
        function handleNextButtonClick() {
            var nextPage = currentPage + 1;
            if (nextPage <= totalPages) {
                goToPage(nextPage);
            }
        }

        // 페이지 이동 함수
        function goToPage(page) {
            currentPage = page;
            updateTable(getCurrentPageData());
            updatePagination();
        }

        // 현재 페이지에 해당하는 데이터 반환
        function getCurrentPageData() {
            var startIndex = (currentPage - 1) * pageSize;
            var endIndex = Math.min(startIndex + pageSize, tableData.length);
            return tableData.slice(startIndex, endIndex);
        }

        // --------------------------------------------------------------------------

        // 검색 필터 적용 함수
        function applySearchFilter() {
            var inputText = $('#searchInput').val();
            var searchType = $('.select .selected-value').text();

            // 조건에 따라 데이터 필터링
            var searchData = tableData;
            currentPage = 1;
            // 검색어가 비어 있는 경우 페이지 초기화
            
            tableData = (inputText !== '')
                ? filterData(inputText, searchType)
                : orgLeaderTableSource;
            
            updateTable(tableData); // 필터링된 데이터를 표시
            updatePagination(); // 페이지네이션 업데이트 추가
        }

        // 데이터 필터링 함수
        function filterData(inputText, searchType) {
            return orgLeaderTableSource.filter(function (item) {
                return (
                    (searchType === '전체' &&
                        item &&
                        item.LeaderName &&
                        (item.LeaderName.includes(inputText) ||
                            (item.SportName && typeof item.SportName === 'string' && item.SportName.includes(inputText)))) ||
                    (searchType === '이름' && item && item.LeaderName && item.LeaderName.includes(inputText)) ||
                    (searchType === '종목' &&
                        item &&
                        item.SportName &&
                        typeof item.SportName === 'string' &&
                        item.SportName.includes(inputText))
                );
            });
        }

        // 업데이트된 데이터로 테이블 갱신
        function updateTable(data) {
            data = tableData;
            renderLeaderTable(getCurrentPageData());
            var totalLeaders = tableData.length;
            $('#totalleader').text('총 ' + totalLeaders + '명');

            // 전체 선택/해제 체크박스에 대한 이벤트
            handleSelectAllCheckbox();
            $('#selectAll').prop('checked', false);

            // 개별 체크박스에 대한 이벤트
            handleIndividualCheckbox();
            updatePagination(data.length);
            pageInit(data.length);
        }

        function renderLeaderTable(data) {
            var str = '';

            if (data.length === 0) {
                // 검색된 결과가 없는 경우 메시지 표시
                str = '<tr><td colspan="6">검색된 결과가 없습니다.</td></tr>';
            } else {
                // 현재 페이지에서의 인덱스 계산
                var startIndex = (currentPage - 1) * pageSize;

                // 검색된 결과가 있는 경우 테이블 표시
                for (var i = 0; i < data.length; i++) {
                    var number = startIndex + i + 1; // 현재 페이지에서의 인덱스 계산
                    str += '<tr><td><input type="checkbox" class="checkbox">' + number + '</td><td>' + data[i].LeaderNo + '</td><td>' + data[i].LeaderName + '</td><td>' + data[i].SportName + '</td><td>' + data[i].SchoolName + '</td><td><button class="detailsBtn">상세보기</button></td></tr>';
                }
            }
            $('.leaderTable_body').html(str);
        }

        // 전체 선택/해제 체크박스에 대한 이벤트 처리 함수
        function handleSelectAllCheckbox() {
            $('#selectAll').change(function () {
                $('.leaderTable_body input[type="checkbox"]').prop('checked', $(this).prop('checked'));
            });
        }

        // 개별 체크박스에 대한 이벤트 처리 함수
        function handleIndividualCheckbox() {
            $('.leaderTable_body').on('change', 'input[type="checkbox"]', function () {
                var allChecked = $('.leaderTable_body input[type="checkbox"]:checked').length === $('.leaderTable_body input[type="checkbox"]').length;
                $('#selectAll').prop('checked', allChecked);
            });
        }

        // 팝업 창 확인 버튼 클릭 시 삭제 동작 함수
        function handleDelete(checkedItems) {
            var numbersToRemove = [];

            checkedItems.each(function () {
                var row = $(this).closest('tr');
                var number = row.find('td:eq(1)').text(); // 사용자 번호가 있는 열의 인덱스를 사용
                numbersToRemove.push(number);
                // var row = $(this).closest('tr');
                // var index = row.index();
                // tableData.splice(index, 1); // 배열에서 해당 인덱스의 데이터 삭제
                // row.remove();
            });

            //ajax 코드 작성 -> numbersToRemove delete
            $.ajax({
                url: '/Home/Remove',
                type: 'DELETE',
                contentType: 'application/json',
                data: JSON.stringify(numbersToRemove),
                success: function (result) {
                    // 서버 응답을 받았을 때의 동작
                    if (result === "OK") {
                        // 성공 메시지 담기
                        alert("성공!");
                    } else {
                        // 실패 메시지 담기
                        alert("실패!");
                    }
                    window.location.reload();
                    // 페이지 업데이트
                    //updatePagination();
                    //updateTable(getCurrentPageData());
                },
                error: function () {
                    // 서버 요청 실패 시의 동작
                    alert("서버 요청 중 오류가 발생했습니다!");
                }
            });

            // 페이지 업데이트
            updatePagination();
            updateTable(getCurrentPageData());
        }

        // 팝업 창 열기
        function openDeletePopup(checkedItems) {
            // 팝업 열기
            var popup = document.getElementById('deletePopup');
            popup.style.display = 'block';

            // 확인 버튼 클릭
            document.querySelector('#deletePopup .confirm').addEventListener('click', function () {
                handleDeleteConfirmation(checkedItems);
            });

            // 팝업창 닫기 버튼 클릭
            $('#deletePopup .popup-button-box .register').on('click', handleClosePopup);
        }

        // 팝업 창 확인 버튼 클릭 시 동작
        function handleDeleteConfirmation() {
            // 팝업 닫기
            var popup = document.getElementById('deletePopup');
            popup.style.display = 'none';
        }

        // 팝업 창 닫기 버튼 클릭 시 동작
        function handleClosePopup() {
            // 팝업창 닫기
            $('#deletePopup').hide();
        }

        // ----------------------------------------------------------------------------------

        // 페이지 로딩 시 실행되는 코드
        $(document).ready(function () {
            initialize();
        });
    </script>
}
           